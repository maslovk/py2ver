import cocotb
import os
from pathlib import Path
from cocotb.runner import get_runner
from cocotb.triggers import Timer
from cocotb.clock import Clock
from cocotb.triggers import RisingEdge
import pickle

async def save_results(ret_val):
    proj_path = Path(__file__).resolve().parent
    if not os.path.isdir(proj_path.joinpath('results')):
        os.mkdir(proj_path.joinpath('results'))

    with open(proj_path.joinpath('results').joinpath('results.pickle'), 'wb') as handle:
        pickle.dump(ret_val, handle, protocol=pickle.HIGHEST_PROTOCOL)

# Start a testcase
@cocotb.test()
async def tb_test(dut):
{% if period > 0 %}
    cocotb.start_soon(Clock(dut.clk, {{ period }}, units="ms").start())
    await RisingEdge(dut.clk)
{% endif %}
{% for arg in in_args %}
    dut.{{ arg[0] }}.value = {{ arg[1] }}
{% endfor %}
    await Timer(10)
    return_val = {
    {% for arg in out_args %}
    '{{ arg }}' : int(dut.{{ arg }}.value),
    {% endfor %}
    }
    await save_results(str(return_val))