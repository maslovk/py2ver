//=======================================================
//  This code is generated by Terasic System Builder
//  Updated to include PRBS7 + Fixed Pattern UART TX tests
//=======================================================

module DE0_Nano(

    //////////// CLOCK //////////
    CLOCK_50,

    //////////// LED //////////
    LED,

    //////////// KEY //////////
    KEY,

    //////////// SW //////////
    SW,

    //////////// SDRAM //////////
    DRAM_ADDR,
    DRAM_BA,
    DRAM_CAS_N,
    DRAM_CKE,
    DRAM_CLK,
    DRAM_CS_N,
    DRAM_DQ,
    DRAM_DQM,
    DRAM_RAS_N,
    DRAM_WE_N,

    //////////// EPCS //////////
    EPCS_ASDO,
    EPCS_DATA0,
    EPCS_DCLK,
    EPCS_NCSO,

    //////////// Accelerometer and EEPROM //////////
    G_SENSOR_CS_N,
    G_SENSOR_INT,
    I2C_SCLK,
    I2C_SDAT,

    //////////// ADC //////////
    ADC_CS_N,
    ADC_SADDR,
    ADC_SCLK,
    ADC_SDAT,

    //////////// 2x13 GPIO Header //////////
    GPIO_2,
    GPIO_2_IN,

    //////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
    GPIO_0_TX,
    GPIO_0_RX,
    GPIO_0,
    GPIO_0_IN,

    //////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
    GPIO_1,
    GPIO_1_IN
);

//=======================================================
//  PORT declarations
//=======================================================
input              CLOCK_50;
output      [7:0]  LED;
input       [1:0]  KEY;
input       [3:0]  SW;

output     [12:0]  DRAM_ADDR;
output      [1:0]  DRAM_BA;
output             DRAM_CAS_N, DRAM_CKE, DRAM_CLK, DRAM_CS_N;
inout      [15:0]  DRAM_DQ;
output      [1:0]  DRAM_DQM;
output             DRAM_RAS_N, DRAM_WE_N;

output             EPCS_ASDO;
input              EPCS_DATA0;
output             EPCS_DCLK, EPCS_NCSO;

output             G_SENSOR_CS_N;
input              G_SENSOR_INT;
output             I2C_SCLK;
inout              I2C_SDAT;

output             ADC_CS_N, ADC_SADDR, ADC_SCLK;
input              ADC_SDAT;

inout      [12:0]  GPIO_2;
input       [2:0]  GPIO_2_IN;

input              GPIO_0_RX;
output             GPIO_0_TX;
inout      [33:2]  GPIO_0;
input       [1:0]  GPIO_0_IN;

inout      [33:0]  GPIO_1;
input       [1:0]  GPIO_1_IN;

//=======================================================
//  REG/WIRE declarations
//=======================================================
wire input_valid;
wire ready;

{%- for input in inputs %}
wire [{{input.width - 1}}:0] {{ input.name }}_int;
{%- endfor %}

{%- for output in outputs %}
wire [{{output.width - 1}}:0] {{ output.name }}_int;
wire [{{output.width - 1}}:0] {{ output.name }}_out_int;
{%- endfor %}

wire [{{inputs_size - 1}}:0]  rx_data_int;
wire [{{outputs_size - 1}}:0] tx_data_int;

// UART TX mux paths
wire uart_tx_core;
wire prbs_tx;
wire prbs_active;
wire pat_tx;
wire pat_active;

//=======================================================
//  Structural logic
//=======================================================

delayed_registers delayed_registers_inst (
    .clk(CLOCK_50),
    .rst_n(KEY[0]),
    .input_valid(input_valid),
{%- for output in outputs %}
    .{{ output.name }}({{ output.name }}_int),
    .{{ output.name }}_out({{ output.name }}_out_int),
{%- endfor %}
    .ready(ready)
);

assign tx_data_int = {
{%- for output in outputs %}
    {{ output.name }}_out_int{{ "," if not loop.last }}
{%- endfor %}
};

assign rx_data_int = {
{%- for input in inputs %}
    {{ input.name }}_int{{ "," if not loop.last }}
{%- endfor %}
};

// ---------------- UART core transceiver ----------------
uart_transceiver uart_transceiver_inst(
    .clk(CLOCK_50),
    .rst_n(KEY[0]),
    .tx_data(tx_data_int),
    .tx_valid(ready),
    .tx(uart_tx_core),
    .rx(GPIO_0_RX),
    .rx_data(rx_data_int),
    .rx_valid(input_valid),
    .tx_busy()
);

// ---------------- PRBS7 TX tester ----------------------
uart_prbs7_tx_test #(
    .CLK_HZ(50_000_000),
    .BAUD(115200),
    .PERIOD_MS(500),
    .BURST_BYTES(256),
    .PREAMBLE(1'b1)  // keep off unless testing preamble sync
) u_prbs_tx (
    .clk(CLOCK_50),
    .rst_n(KEY[0]),
    .enable(SW[1]),
    .tx(prbs_tx),
    .active(prbs_active)
);

// -------------- Fixed Pattern TX generator -------------
uart_fixed_pattern_tx #(
    .CLK_HZ(50_000_000),
    .BAUD(115200),
    .PERIOD_MS(200),
    .NUM_BYTES(32)
) u_pat_tx (
    .clk(CLOCK_50),
    .rst_n(KEY[0]),
    .enable(SW[2]),
    .tx(pat_tx),
    .active(pat_active)
);

// ---------------- TX output mux ------------------------
assign GPIO_0_TX = SW[2] ? pat_tx :
                   SW[1] ? prbs_tx :
                           uart_tx_core;

// Optional LED indicators
// assign LED[2] = pat_active;
// assign LED[1] = prbs_active;

assign LED = 8'h00;

// ---------------- Main Core ----------------------------
{{ top_name }} {{ top_name }}_inst(
    .clk(CLOCK_50),
{%- for input in inputs %}
    .{{ input.name }}({{ input.name }}_int){{ "," if not loop.last or outputs|length > 0 }}
{%- endfor %}
{%- for output in outputs %}
    .{{ output.name }}({{ output.name }}_int){{ "," if not loop.last }}
{%- endfor %}
);

endmodule
